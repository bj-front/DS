#!/usr/bin/env node

import chalk from 'chalk'
import fs from 'fs'
import inquirer from 'inquirer'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Configuration
const WEBSITE_PAGES_PATH = path.resolve(__dirname, '../src/pages')
const MENU_JSON_PATH = path.resolve(__dirname, '../src/config/menu.json')

// Ic√¥nes par d√©faut pour les pages
const DEFAULT_ICONS = [
  'FileText', 'Home', 'Info', 'Settings', 'Users', 'Mail',
  'Calendar', 'Star', 'Heart', 'Search', 'Plus', 'Edit', 'Book',
  'Globe', 'Shield', 'Target', 'Zap', 'Award', 'Briefcase', 'Phone'
]

// Fonction pour extraire les sections existantes du menu
function getExistingSections() {
  try {
    if (!fs.existsSync(MENU_JSON_PATH)) {
      return []
    }
    
    const menuContent = fs.readFileSync(MENU_JSON_PATH, 'utf8')
    const menuConfig = JSON.parse(menuContent)
    
    return menuConfig.menuItems
      .filter(item => item.type === 'section')
      .map(section => ({
        name: section.label,
        value: section.key
      }))
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la lecture du menu: ${error.message}`))
    return []
  }
}

// Fonction pour formater le nom de la page (comme dans create-component)
function formatPageName(name) {
  return name
    .replace(/[^a-zA-Z0-9]/g, '')
    .replace(/^./, str => str.toUpperCase())
}

// Template de page utilisant le composant PageLayout
function generatePageTemplate(pageName, icon, section) {
  return `<template>
  <PageLayout 
    :title="'${pageName}'"
    :icon="'${icon || 'FileText'}'"
    :description="'Page ${pageName} g√©n√©r√©e automatiquement'"
    :section="'${section || 'Page'}'"
  >
    <div class="content-section">
      <h2>Contenu Principal</h2>
      <div class="content-example">
        <p>Bienvenue sur la page <strong>${pageName}</strong>.</p>
        <p>Cette page a √©t√© g√©n√©r√©e automatiquement avec le CLI <code>create:page</code>.</p>
        <p>Vous pouvez personnaliser ce contenu selon vos besoins en modifiant ce fichier.</p>
      </div>
    </div>
    
    <div class="content-section">
      <h2>Sections Disponibles</h2>
      <div class="content-grid">
        <div class="content-card">
          <h3>Section d'exemple</h3>
          <div class="content-example">
            <p>Vous pouvez ajouter du contenu ici. Utilisez les classes CSS pr√©d√©finies :</p>
            <ul>
              <li><code>.content-section</code> - Section principale avec bordure</li>
              <li><code>.content-example</code> - Zone d'exemple avec padding</li>
              <li><code>.content-grid</code> - Grille pour organiser le contenu</li>
              <li><code>.content-card</code> - Carte avec bordure et coins arrondis</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <div class="content-section">
      <h2>Documentation</h2>
      <div class="content-example">
        <p>üìÅ <strong>Fichier :</strong> <code>src/pages/${pageName}Page.vue</code></p>
        <p>üé® <strong>Layout :</strong> Utilise le composant <code>PageLayout</code></p>
        <p>üìù <strong>Personnalisation :</strong> Modifiez le contenu entre les balises <code>&lt;PageLayout&gt;</code></p>
        <p>üîß <strong>Props disponibles :</strong></p>
        <ul>
          <li><code>title</code> - Titre de la page</li>
          <li><code>icon</code> - Ic√¥ne affich√©e √† c√¥t√© du titre</li>
          <li><code>description</code> - Description sous le titre</li>
          <li><code>section</code> - Badge de section</li>
        </ul>
      </div>
    </div>
  </PageLayout>
</template>

<script setup lang="ts">
import { PageLayout } from '@/components'
</script>

<style scoped>
/* Styles sp√©cifiques √† cette page */
/* Les styles de base sont fournis par PageLayout */

/* Exemple de style personnalis√© */
.content-example ul {
  margin: var(--spacing-4) 0;
  padding-left: var(--spacing-6);
}

.content-example li {
  margin-bottom: var(--spacing-2);
  color: var(--theme-colors-text-secondary);
  line-height: 1.6;
}

.content-example li code {
  background: var(--theme-colors-surface-muted);
  padding: var(--spacing-1) var(--spacing-2);
  border-radius: var(--border-radius-sm);
  font-family: var(--font-family-mono);
  font-size: var(--font-size-sm);
  color: var(--theme-colors-brand-primary-600);
}
</style>`
}

// Fonction pour cr√©er le fichier de page
function createPageFile(pageName, icon, section, targetPath) {
  const pageContent = generatePageTemplate(pageName, icon, section)
  
  // Cr√©er le dossier si n√©cessaire
  const pageDir = path.dirname(targetPath)
  if (!fs.existsSync(pageDir)) {
    fs.mkdirSync(pageDir, { recursive: true })
  }
  
  // √âcrire le fichier
  fs.writeFileSync(targetPath, pageContent, 'utf8')
  return targetPath
}

// Fonction pour mettre √† jour les routes du routeur principal
async function updateMainRouter(pageName, route) {
  const ROUTER_PATH = path.resolve(__dirname, '../src/domains/shared/router/index.ts')
  
  try {
    let routerContent = fs.readFileSync(ROUTER_PATH, 'utf8')
    
    // G√©n√©rer l'import de la nouvelle page
    const importStatement = `const ${pageName}Page = (): Promise<typeof import('@/pages/${pageName}Page.vue')> => import('@/pages/${pageName}Page.vue')`
    
    // V√©rifier si l'import existe d√©j√†
    if (!routerContent.includes(`${pageName}Page =`)) {
      // Trouver la ligne des imports dynamiques et ajouter le nouvel import
      const importLineRegex = /const NotFoundPage = \(\).*?=> import\('\.\/NotFoundPage\.vue'\)/
      const match = routerContent.match(importLineRegex)
      
      if (match) {
        const insertAfter = routerContent.indexOf(match[0]) + match[0].length
        routerContent = routerContent.slice(0, insertAfter) + '\n' + importStatement + routerContent.slice(insertAfter)
      }
    }
    
    // G√©n√©rer la nouvelle route
    const newRoute = `  {
    path: '${route}',
    name: '${pageName.toLowerCase()}',
    component: ${pageName}Page,
    meta: {
      title: '${pageName}',
      description: 'Page ${pageName} g√©n√©r√©e automatiquement'
    }
  }`
    
    // V√©rifier si la route existe d√©j√†
    if (!routerContent.includes(`path: '${route}'`)) {
      // Trouver l'endroit o√π ins√©rer la nouvelle route (avant les routes g√©n√©r√©es)
      const generatedRoutesRegex = /\.\.\.generatedRoutes,/
      const generatedMatch = routerContent.match(generatedRoutesRegex)
      
      if (generatedMatch) {
        // Ins√©rer avant les routes g√©n√©r√©es
        const insertBefore = routerContent.indexOf(generatedMatch[0])
        routerContent = routerContent.slice(0, insertBefore) + newRoute + ',\n  ' + routerContent.slice(insertBefore)
      } else {
        // Si pas de routes g√©n√©r√©es, ajouter avant la route 404
        const notFoundRegex = /\{[^}]*path: '\/:\(.*?\)\*'[^}]*\}/s
        const notFoundMatch = routerContent.match(notFoundRegex)
        
        if (notFoundMatch) {
          const insertBefore = routerContent.indexOf(notFoundMatch[0])
          routerContent = routerContent.slice(0, insertBefore) + newRoute + ',\n  ' + routerContent.slice(insertBefore)
        }
      }
      
      // √âcrire le fichier mis √† jour
      fs.writeFileSync(ROUTER_PATH, routerContent, 'utf8')
      console.log(chalk.gray(`üõ£Ô∏è  Route ajout√©e au routeur principal: ${path.relative(process.cwd(), ROUTER_PATH)}`))
    } else {
      console.log(chalk.yellow(`‚ö†Ô∏è  Route d√©j√† existante dans le routeur pour ${pageName}`))
    }
    
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la mise √† jour du routeur: ${error.message}`))
    throw error
  }
}

// Fonction pour mettre √† jour le menu (m√™me logique que create-component)
async function updateMenuJson(pageName, icon, route, targetSection) {
  try {
    // Lire le fichier de menu existant
    const menuContent = fs.readFileSync(MENU_JSON_PATH, 'utf8')
    const menuConfig = JSON.parse(menuContent)

    // Cr√©er le nouvel item de menu
    const newMenuItem = {
      key: pageName.toLowerCase(),
      label: pageName,
      icon: icon,
      to: route
    }

    // V√©rifier si l'item n'existe pas d√©j√†
    const existingItemIndex = menuConfig.menuItems.findIndex(item => 
      item.key === newMenuItem.key && !item.type
    )
    
    if (existingItemIndex === -1) {
      if (targetSection && targetSection !== 'none') {
        // Trouver la section cible
        const sectionIndex = menuConfig.menuItems.findIndex(item => 
          item.key === targetSection && item.type === 'section'
        )
        
        if (sectionIndex !== -1) {
          // Trouver le prochain √©l√©ment de section ou la fin
          let insertIndex = menuConfig.menuItems.length
          for (let i = sectionIndex + 1; i < menuConfig.menuItems.length; i++) {
            if (menuConfig.menuItems[i].type === 'section') {
              insertIndex = i
              break
            }
          }
          
          // Ins√©rer le nouvel item
          menuConfig.menuItems.splice(insertIndex, 0, newMenuItem)
        } else {
          // Section non trouv√©e, ajouter √† la fin
          menuConfig.menuItems.push(newMenuItem)
        }
      } else {
        // Ajouter au d√©but (hors section) - avant toutes les sections
        const firstSectionIndex = menuConfig.menuItems.findIndex(item => item.type === 'section')
        if (firstSectionIndex !== -1) {
          // Ins√©rer avant la premi√®re section
          menuConfig.menuItems.splice(firstSectionIndex, 0, newMenuItem)
        } else {
          // Aucune section trouv√©e, ajouter au d√©but
          menuConfig.menuItems.unshift(newMenuItem)
        }
      }
      console.log(chalk.green(`‚úÖ Ajout√© au menu: ${pageName}`))
    } else {
      // Mettre √† jour l'item existant
      menuConfig.menuItems[existingItemIndex] = newMenuItem
      console.log(chalk.yellow(`‚ö†Ô∏è  Mis √† jour dans le menu: ${pageName}`))
    }

    // Sauvegarder le fichier menu mis √† jour
    fs.writeFileSync(MENU_JSON_PATH, JSON.stringify(menuConfig, null, 2), 'utf8')
    console.log(chalk.gray(`üìù Menu mis √† jour: ${path.relative(process.cwd(), MENU_JSON_PATH)}`))
    
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de la mise √† jour du menu: ${error.message}`))
    throw error
  }
}

async function createPage() {
  console.log(chalk.blue.bold('\nüöÄ G√©n√©rateur de pages Website\n'))

  try {
    // 1. Nom de la page
    const { pageName } = await inquirer.prompt([
      {
        type: 'input',
        name: 'pageName',
        message: 'Nom de la page (ex: Contact, About, etc.) :',
        validate: (input) => {
          if (!input || input.trim().length === 0) {
            return 'Le nom de la page est requis'
          }
          if (!/^[A-Za-z][A-Za-z0-9\s]*$/.test(input.trim())) {
            return 'Le nom doit commencer par une lettre et ne contenir que des lettres, chiffres et espaces'
          }
          return true
        },
        filter: (input) => formatPageName(input.trim())
      }
    ])

    // 2. Choix de la section
    const existingSections = getExistingSections()
    const sectionChoices = [
      { name: 'üîò Hors section (page ind√©pendante)', value: 'none' },
      new inquirer.Separator('‚îÄ‚îÄ Sections existantes ‚îÄ‚îÄ'),
      ...existingSections
    ]

    const { targetSection } = await inquirer.prompt([
      {
        type: 'list',
        name: 'targetSection',
        message: 'Dans quelle section voulez-vous ajouter cette page ?',
        choices: sectionChoices,
        pageSize: 10
      }
    ])

    // 3. S√©lection d'ic√¥ne
    console.log(chalk.gray(`üé® Ic√¥nes disponibles: ${DEFAULT_ICONS.length} ic√¥nes`))
    
    const { selectedIcon } = await inquirer.prompt([
      {
        type: 'list',
        name: 'selectedIcon',
        message: 'Choisissez une ic√¥ne pour votre page :',
        choices: DEFAULT_ICONS.map(icon => ({ name: icon, value: icon })),
        pageSize: 15
      }
    ])

    // 4. Route personnalis√©e
    const defaultRoute = targetSection === 'none' 
      ? `/${pageName.toLowerCase()}`
      : `/${targetSection}/${pageName.toLowerCase()}`
    
    const { customRoute } = await inquirer.prompt([
      {
        type: 'input',
        name: 'customRoute',
        message: `Route de la page (d√©faut: ${defaultRoute}) :`,
        default: defaultRoute,
        validate: (input) => {
          if (!input.startsWith('/')) {
            return 'La route doit commencer par /'
          }
          return true
        }
      }
    ])

    // 5. Confirmation
    const sectionLabel = targetSection === 'none' ? 'Hors section' : existingSections.find(s => s.value === targetSection)?.name || targetSection
    const { confirm } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'confirm',
        message: `Cr√©er la page "${pageName}" dans "${sectionLabel}" avec la route "${customRoute}" et l'ic√¥ne "${selectedIcon}" ?`,
        default: true
      }
    ])

    if (!confirm) {
      console.log(chalk.yellow('\n‚ùå Annul√©'))
      return
    }

    console.log(chalk.green('\n‚è≥ Cr√©ation de la page...'))

    // 6. Cr√©er le fichier de page
    const pageFilePath = path.join(WEBSITE_PAGES_PATH, `${pageName}Page.vue`)
    const createdFile = createPageFile(pageName, selectedIcon, sectionLabel, pageFilePath)

    // 7. Mettre √† jour le menu
    console.log(chalk.blue('\nüîÑ Mise √† jour du menu...'))
    await updateMenuJson(pageName, selectedIcon, customRoute, targetSection)

    // 8. Mettre √† jour le routeur
    console.log(chalk.blue('üîÑ Mise √† jour du routeur...'))
    await updateMainRouter(pageName, customRoute)

    // 8. Succ√®s !
    console.log(chalk.green.bold('\n‚úÖ Page cr√©√©e avec succ√®s !'))
    console.log(chalk.gray('\nüìÅ Fichier cr√©√© :'))
    console.log(chalk.gray(`   ‚Ä¢ ${path.relative(process.cwd(), createdFile)}`))

    console.log(chalk.blue('\nüéØ Prochaines √©tapes :'))
    console.log(chalk.gray('   ‚Ä¢ Personnaliser le contenu de la page'))
    console.log(chalk.gray('   ‚Ä¢ Ajouter des composants et styles sp√©cifiques'))
    console.log(chalk.gray('   ‚Ä¢ Tester la page dans le navigateur'))
    console.log(chalk.gray('   ‚Ä¢ La page appara√Ætra automatiquement dans le menu'))

    console.log(chalk.green('\nüîó Liens utiles :'))
    console.log(chalk.gray(`   ‚Ä¢ Fichier: ${path.relative(process.cwd(), createdFile)}`))
    console.log(chalk.gray(`   ‚Ä¢ Route: ${customRoute}`))
    console.log(chalk.gray(`   ‚Ä¢ Section: ${sectionLabel}`))

  } catch (error) {
    console.error(chalk.red('\n‚ùå Erreur:', error.message))
    process.exit(1)
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  createPage()
}

export { createPage }
