name: Auto Pull Request

on:
  workflow_run:
    workflows: ["Design System CI/CD", "Website CI/CD"]
    types: [completed]
    branches-ignore: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  create-pr:
    name: üöÄ Create Pull Request
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      !contains(github.event.workflow_run.head_branch, 'dependabot')
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîç Check if PR already exists
        id: check-pr
        run: |
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          WORKFLOW_NAME="${{ github.event.workflow_run.workflow.name }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          
          # V√©rifier si une PR existe d√©j√† pour cette branche
          PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --state open --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
          
          # D√©tecter le type de changements
          if [[ "$WORKFLOW_NAME" == "Design System CI/CD" ]]; then
            echo "project_type=design-system" >> $GITHUB_OUTPUT
          elif [[ "$WORKFLOW_NAME" == "Website CI/CD" ]]; then
            echo "project_type=website" >> $GITHUB_OUTPUT
          else
            echo "project_type=mixed" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Create Pull Request
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          BRANCH_NAME="${{ steps.check-pr.outputs.branch_name }}"
          PROJECT_TYPE="${{ steps.check-pr.outputs.project_type }}"
          WORKFLOW_NAME="${{ steps.check-pr.outputs.workflow_name }}"
          
          # Analyser les changements pour g√©n√©rer un titre intelligent
          COMMITS=$(git log --oneline main..$BRANCH_NAME | head -5)
          
          # G√©n√©rer un titre bas√© sur le type de projet et les commits
          if [[ "$PROJECT_TYPE" == "design-system" ]]; then
            PR_TITLE="üé® feat(design-system): Updates from $BRANCH_NAME"
            PROJECT_ICON="üé®"
            PROJECT_NAME="Design System"
          elif [[ "$PROJECT_TYPE" == "website" ]]; then
            PR_TITLE="üåê feat(website): Updates from $BRANCH_NAME"
            PROJECT_ICON="üåê"
            PROJECT_NAME="Website"
          else
            PR_TITLE="‚ú® feat: Updates from $BRANCH_NAME"
            PROJECT_ICON="‚ú®"
            PROJECT_NAME="Mixed Changes"
          fi
          
          # Cr√©er le changeset pour le design system si n√©cessaire
          if [[ "$PROJECT_TYPE" == "design-system" ]]; then
            COMPONENT_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/" | wc -l)
            TOKEN_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/tokens/" | wc -l)
            NEW_COMPONENTS=$(git diff --name-only --diff-filter=A origin/main...HEAD | grep -E "packages/utopia/src/components/.*\.vue$" | wc -l)
            
            if [ "$COMPONENT_CHANGES" -gt 0 ] || [ "$TOKEN_CHANGES" -gt 0 ]; then
              BRANCH_SAFE=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
              CHANGESET_FILE=".changeset/auto-$BRANCH_SAFE-$(date +%s).md"
              
              if [ "$NEW_COMPONENTS" -gt 0 ]; then
                CHANGE_TYPE="minor"
                DESCRIPTION="Add new component(s) to design system"
              elif [ "$COMPONENT_CHANGES" -gt 0 ]; then
                CHANGE_TYPE="patch"
                DESCRIPTION="Update existing components"
              elif [ "$TOKEN_CHANGES" -gt 0 ]; then
                CHANGE_TYPE="patch"
                DESCRIPTION="Update design tokens"
              else
                CHANGE_TYPE="patch"
                DESCRIPTION="General design system updates"
              fi
              
              cat > "$CHANGESET_FILE" << EOF
          ---
          "@club-employes/utopia": $CHANGE_TYPE
          ---
          
          $DESCRIPTION from branch $BRANCH_NAME
          EOF
              
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add "$CHANGESET_FILE"
              git commit -m "chore: add changeset for design system changes"
              git push origin $BRANCH_NAME
              
              echo "‚úÖ Changeset created: $CHANGESET_FILE"
            fi
          fi
          
          # G√©n√©rer le body de la PR
          cat > pr_body.md << EOF
          ## $PROJECT_ICON $PROJECT_NAME Update
          
          **Branch:** \`$BRANCH_NAME\`
          **Workflow:** $WORKFLOW_NAME
          
          ### üìã Commits inclus :
          \`\`\`
          $COMMITS
          \`\`\`

          ### ‚úÖ Quality Checks Passed
          - [x] üîç Lint & Type check passed
          - [x] üé® Design system tokens validation passed
          - [x] üèóÔ∏è Build successful
          EOF
          
          if [[ "$PROJECT_TYPE" == "website" ]]; then
            cat >> pr_body.md << EOF
          - [x] üöÄ Preview deployment ready
          
          ### üåü Preview Deployment
          A preview deployment will be created automatically.
          Check the comments for the preview URL.
          
          ### üöÄ Next Steps
          1. **Review the changes** in the Files tab
          2. **Test the preview** deployment
          3. **Check responsive design** on different devices
          4. **Approve & merge** to deploy to production
          EOF
          elif [[ "$PROJECT_TYPE" == "design-system" ]]; then
            cat >> pr_body.md << EOF
          - [x] üìù Changeset created (if needed)
          
          ### üöÄ Next Steps
          1. **Review the changes** in the Files tab
          2. **Test components** in Storybook
          3. **Approve & merge** to trigger NPM release
          EOF
          fi
          
          cat >> pr_body.md << EOF
          
          ---
          
          > ü§ñ *This PR was created automatically*
          > üìã *Ready for review and merge*
          EOF

          # Cr√©er la PR avec les bonnes labels
          if [[ "$PROJECT_TYPE" == "design-system" ]]; then
            LABELS="design-system,auto-created"
          elif [[ "$PROJECT_TYPE" == "website" ]]; then
            LABELS="website,auto-created"
          else
            LABELS="auto-created,ready-for-review"
          fi

          gh pr create \
            --title "$PR_TITLE" \
            --body-file pr_body.md \
            --head "$BRANCH_NAME" \
            --base main \
            --label "$LABELS"
            
          echo "‚úÖ Pull Request cr√©√©e automatiquement !"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Add comment if PR exists
        if: steps.check-pr.outputs.pr_exists != '0'
        run: |
          BRANCH_NAME="${{ steps.check-pr.outputs.branch_name }}"
          PROJECT_TYPE="${{ steps.check-pr.outputs.project_type }}"
          WORKFLOW_NAME="${{ steps.check-pr.outputs.workflow_name }}"
          PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --state open --json number --jq '.[0].number')
          
          if [[ "$PROJECT_TYPE" == "design-system" ]]; then
            PROJECT_ICON="üé®"
            PROJECT_NAME="Design System"
          elif [[ "$PROJECT_TYPE" == "website" ]]; then
            PROJECT_ICON="üåê"  
            PROJECT_NAME="Website"
          else
            PROJECT_ICON="‚ú®"
            PROJECT_NAME="Mixed"
          fi
          
          gh pr comment "$PR_NUMBER" --body "üéâ **Nouvelles validations pass√©es !**

          $PROJECT_ICON **$PROJECT_NAME CI/CD** - ‚úÖ Success
          üîç **Code Quality** - ‚úÖ Lint & Type checks
          üèóÔ∏è **Build** - ‚úÖ Successful
          üé® **Design System** - ‚úÖ Token validation
          
          **Workflow:** $WORKFLOW_NAME
          
          Cette PR est √† jour et pr√™te pour review ! üöÄ"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}