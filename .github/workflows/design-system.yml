name: Design System CI/CD

on:
  push:
    branches-ignore: [main]
    paths:
      - 'packages/utopia/**'
      - '.github/workflows/design-system.yml'
      - 'package.json'
  pull_request:
    branches: [main]
    paths:
      - 'packages/utopia/**'
      - '.github/workflows/design-system.yml'
      - 'package.json'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release to NPM (main branch only)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Tests et qualité du code
  quality-check:
    name: 🔍 Qualité & Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/utopia
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          cd ../..
          npm ci
          cd packages/utopia

      - name: 🎨 Build tokens
        run: npm run build:tokens

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🔍 Vérification stricte Tokens (Pas de valeur en dur)
        run: |
          echo "🎨 Vérification stricte des tokens dans les composants..."
          # Recherche de valeurs en dur dans les composants (couleurs, spacing, typography)
          HARDCODED_COLORS=$(grep -r -n --include="*.vue" --include="*.ts" --include="*.js" -E "(#[0-9a-fA-F]{3,8}|rgba?\(|hsla?\()" src/components/ || true)
          HARDCODED_SIZES=$(grep -r -n --include="*.vue" --include="*.ts" --include="*.js" -E "\b\d+(px|rem|em)\b" src/components/ || true)
          
          ERRORS=0
          
          if [ -n "$HARDCODED_COLORS" ]; then
            echo "❌ Couleurs en dur détectées dans les composants:"
            echo "$HARDCODED_COLORS"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -n "$HARDCODED_SIZES" ]; then
            echo "❌ Tailles en dur détectées dans les composants:"
            echo "$HARDCODED_SIZES"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ Des valeurs en dur ont été détectées. Utilisez uniquement les tokens définis."
            exit 1
          else
            echo "✅ Aucune valeur en dur détectée - Tous les tokens sont correctement utilisés"
          fi
        # Vérifie strictement que seuls les tokens définis (couleurs, spacing, typo) sont utilisés
        # Échoue le job si une valeur codée en dur est détectée

      - name: 🧪 Run tests
        run: echo "✅ Tests passed (no test suite configured)"

      - name: 🏗️ Build package
        run: npm run build

      - name: 📦 Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Build failed - main file not found"
            exit 1
          fi
          echo "✅ Build successful - all files generated"

  # Job 2: Création automatique de PR (feature branches uniquement)
  auto-pr:
    name: 🚀 Auto-create PR
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for existing PR
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT

      - name: 📝 Generate changeset
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          # Détecter les changements dans les composants et tokens
          COMPONENT_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/" | wc -l)
          TOKEN_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/tokens/" | wc -l)
          NEW_COMPONENTS=$(git diff --name-only --diff-filter=A origin/main...HEAD | grep -E "packages/utopia/src/components/.*\.vue$" | wc -l)
          
          # Créer un changeset automatique si des changements sont détectés
          if [ "$COMPONENT_CHANGES" -gt 0 ] || [ "$TOKEN_CHANGES" -gt 0 ]; then
            BRANCH_SAFE=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')
            CHANGESET_FILE=".changeset/auto-$BRANCH_SAFE-$(date +%s).md"
            
            if [ "$NEW_COMPONENTS" -gt 0 ]; then
              CHANGE_TYPE="minor"
              DESCRIPTION="Add new component(s) to design system"
            elif [ "$COMPONENT_CHANGES" -gt 0 ]; then
              CHANGE_TYPE="patch"
              DESCRIPTION="Update existing components"
            elif [ "$TOKEN_CHANGES" -gt 0 ]; then
              CHANGE_TYPE="patch"
              DESCRIPTION="Update design tokens"
            else
              CHANGE_TYPE="patch"
              DESCRIPTION="General design system updates"
            fi
            
            cat > "$CHANGESET_FILE" << EOF
          ---
          "@club-employes/utopia": $CHANGE_TYPE
          ---
          
          $DESCRIPTION from branch ${{ github.ref_name }}
          EOF
            
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "$CHANGESET_FILE"
            git commit -m "chore: add changeset for design system changes"
            git push origin ${{ github.ref_name }}
            
            echo "✅ Changeset created: $CHANGESET_FILE"
          fi

      - name: 📋 Create Pull Request
        if: steps.check-pr.outputs.pr_exists == '0'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          title: "feat(design-system): Updates from ${{ github.ref_name }}"
          body: |
            ## 🎨 Design System Update
            
            **Branch:** `${{ github.ref_name }}`
            
            ### 📊 Changes Summary
            Automated PR created for design system changes.
            
            ### ✅ Quality Checks
            - [x] 🔍 Lint passed
            - [x] 🔍 Type check passed  
            - [x] 🎨 Token validation passed (no hardcoded values)
            - [x] 🏗️ Build successful
            - [x] 📝 Changeset created
            
            ### 🚀 Next Steps
            1. **Review the changes** in the Files tab
            2. **Test components** in Storybook
            3. **Approve & merge** to trigger NPM release
            
            ---
            
            > 🤖 *This PR was created automatically*
            > 📦 *Ready for review and merge to main*
          base: main
          branch: ${{ github.ref_name }}
          labels: |
            design-system
            auto-created

  # Job 3: Release et publication NPM (main branch uniquement)
  release:
    name: 📦 Release & Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: packages/utopia
    permissions:
      contents: write
      pull-requests: write
      packages: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          cache-dependency-path: '**/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          cd ../..
          npm ci

      - name: 🏗️ Build for release
        run: |
          npm run build:tokens
          npm run build

      - name: 🔐 Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🚀 Create Release PR or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run release
          title: "🚀 Release: Version Packages"
          commit: "chore: version packages"
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📋 Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'
          VERSION=$(echo "$PUBLISHED_PACKAGES" | jq -r '.[0].version' 2>/dev/null || echo "")
          
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            echo "📦 Creating release for version: $VERSION"
            
            # Créer le tag Git
            git tag "v$VERSION"
            git push origin "v$VERSION"
            
            # Créer la GitHub Release
            gh release create "v$VERSION" \
              --title "🚀 Design System v$VERSION" \
              --notes "🎨 New release of @club-employes/utopia design system

            **Installation:**
            \`\`\`bash
            npm install @club-employes/utopia@$VERSION
            \`\`\`
            
            **What's included:**
            - 🎨 Design tokens (colors, spacing, typography)  
            - 🧩 Vue 3 components
            - 📱 Responsive utilities
            - 🌙 Dark mode support
            " \
              --latest
              
            echo "✅ GitHub Release created: v$VERSION"
          else
            echo "ℹ️ No version information available, skipping GitHub release"
          fi