name: Feature Branch Automation

on:
  push:
    branches-ignore: [main, develop]
    paths:
      - 'packages/utopia/src/**'

jobs:
  automation:
    name: Auto Changeset & PR
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref || github.ref_name }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      # √âTAPE 1: V√©rifier et cr√©er changeset si n√©cessaire
      - name: Auto-generate changeset
        id: changeset
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Configurer le token pour les push
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # V√©rifier que le dossier .changeset existe
          if [ ! -d ".changeset" ]; then
            echo "‚ùå .changeset directory not found. Repository not properly configured for changesets."
            echo "Run: npm run changeset init"
            exit 1
          fi
          
          # V√©rifier s'il y a d√©j√† un changeset
          if [ -n "$(ls -A .changeset/*.md 2>/dev/null | grep -v README)" ]; then
            echo "‚úÖ Changeset already exists, skipping auto-generation"
            echo "changeset_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # D√©tecter les changements
          COMPONENT_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/" | wc -l)
          TOKEN_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/tokens/" | wc -l)
          
          if [ "$COMPONENT_CHANGES" -gt 0 ] || [ "$TOKEN_CHANGES" -gt 0 ]; then
            echo "üîç Detected changes in components or tokens"
            
            # Analyser les types de changements
            NEW_COMPONENTS=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/.*\.vue$" | grep -v "demo/" | wc -l)
            UPDATED_COMPONENTS=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/" | grep -v "demo/" | wc -l)
            UPDATED_TOKENS=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/tokens/" | wc -l)
            
            # D√©terminer le type de version
            if [ "$NEW_COMPONENTS" -gt 0 ]; then
              VERSION_TYPE="minor"
              CHANGE_SUMMARY="Add new components"
            elif [ "$UPDATED_TOKENS" -gt 0 ]; then
              VERSION_TYPE="minor" 
              CHANGE_SUMMARY="Update design tokens"
            else
              VERSION_TYPE="patch"
              CHANGE_SUMMARY="Update existing components"
            fi
            
            # Cr√©er le changeset
            CHANGESET_FILE=".changeset/auto-$(date +%s).md"
            cat > "$CHANGESET_FILE" << EOF
          ---
          "@club-employes/utopia": $VERSION_TYPE
          ---
          
          $CHANGE_SUMMARY
          
          - Components changed: $UPDATED_COMPONENTS
          - Tokens changed: $UPDATED_TOKENS
          - New components: $NEW_COMPONENTS
          EOF
            
            echo "üìù Created automatic changeset: $CHANGESET_FILE"
            git add "$CHANGESET_FILE"
            git commit -m "chore: add automatic changeset for component/token changes"
            
            # Push vers la branche actuelle
            BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
            git push origin HEAD:"$BRANCH_NAME"
            
            echo "changeset_created=true" >> $GITHUB_OUTPUT
            echo "üìù Created and pushed automatic changeset: $CHANGESET_FILE"
          else
            echo "‚ÑπÔ∏è  No component or token changes detected"
            echo "changeset_created=false" >> $GITHUB_OUTPUT
          fi

      # √âTAPE 2: Cr√©er PR si n√©cessaire (apr√®s changeset)
      - name: Auto-create Pull Request
        if: steps.changeset.outputs.changeset_created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # V√©rifier si une PR existe d√©j√† pour cette branche
          BRANCH_NAME="${{ github.ref_name }}"
          
          # Utiliser GitHub CLI pour v√©rifier les PRs existantes
          PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --json number --jq length)
          
          if [ "$PR_EXISTS" -gt 0 ]; then
            echo "PR already exists for branch $BRANCH_NAME"
            exit 0
          fi
          
          # Analyser les changements pour g√©n√©rer un titre intelligent
          COMPONENT_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/components/" | wc -l)
          TOKEN_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E "packages/utopia/src/tokens/" | wc -l)
          NEW_COMPONENTS=$(git diff --name-only --diff-filter=A origin/main...HEAD | grep -E "packages/utopia/src/components/.*\.vue$" | grep -v "demo/" | wc -l)
          
          # G√©n√©rer le titre et la description
          if [ "$NEW_COMPONENTS" -gt 0 ]; then
            TITLE="feat: add new component(s)"
            TYPE="üÜï New Component"
          elif [ "$COMPONENT_CHANGES" -gt 0 ]; then
            TITLE="feat: update component(s)"
            TYPE="üîß Component Update"
          elif [ "$TOKEN_CHANGES" -gt 0 ]; then
            TITLE="feat: update design tokens"
            TYPE="üé® Design Tokens"
          else
            TITLE="feat: update design system"
            TYPE="üì¶ General Update"
          fi
          
          # G√©n√©rer le corps de la PR
          cat > pr_body.md << EOF
          ## $TYPE
          
          **Branch:** \`$BRANCH_NAME\`
          
          ### üìä Changes Summary
          - üîß Components changed: **$COMPONENT_CHANGES**
          - üé® Tokens changed: **$TOKEN_CHANGES**
          - üÜï New components: **$NEW_COMPONENTS**
          
          ### üîç Files Changed
          \`\`\`
          $(git diff --name-only origin/main...HEAD | head -10)
          \`\`\`
          
          ### ‚úÖ Checklist
          
          - [x] üìù Changeset created (auto-generated)
          - [ ] üèóÔ∏è Build passes
          - [ ] üß™ Tests pass  
          - [ ] üé® Components follow design system guidelines
          - [ ] üìö Documentation updated (if needed)
          - [ ] üîç Code review requested
          
          ### üöÄ Next Steps
          
          1. **Review the changes** in the Files tab
          2. **Test the components** in Storybook/Demo
          3. **Check the changeset** for proper versioning
          4. **Approve & merge** when ready
          
          ---
          
          > ü§ñ *This PR was created automatically by GitHub Actions*
          > üì¶ *A changeset was auto-generated for version management*
          EOF
          
          # Cr√©er les labels s'ils n'existent pas
          echo "üè∑Ô∏è Ensuring labels exist..."
          gh label create "auto-created" --description "Automatically created PR" --color "0E8A16" || true
          gh label create "design-system" --description "Design system related changes" --color "1D76DB" || true
          
          # Essayer d'obtenir l'auteur du commit pour l'assignation
          COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          
          # Essayer diff√©rentes m√©thodes pour trouver le nom d'utilisateur GitHub
          POSSIBLE_USERNAMES=(
            "$(echo $COMMIT_AUTHOR_EMAIL | cut -d'@' -f1)"  # email prefix
            "$(echo $COMMIT_AUTHOR_EMAIL | cut -d'.' -f1)"  # first part before dot
            "${{ github.actor }}"  # GitHub actor who triggered the workflow
          )
          
          GITHUB_USER=""
          for username in "${POSSIBLE_USERNAMES[@]}"; do
            if [ -n "$username" ] && gh api users/"$username" >/dev/null 2>&1; then
              GITHUB_USER="$username"
              echo "‚úÖ Found GitHub user: $GITHUB_USER"
              break
            fi
          done
          
          # Cr√©er la PR avec GitHub CLI
          if [ -n "$GITHUB_USER" ]; then
            echo "üìù Creating PR and assigning to $GITHUB_USER"
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --base main \
              --head "$BRANCH_NAME" \
              --assignee "$GITHUB_USER" \
              --label "auto-created,design-system" || \
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --base main \
              --head "$BRANCH_NAME" \
              --label "auto-created,design-system" || \
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --base main \
              --head "$BRANCH_NAME"
          else
            echo "üìù Creating PR without assignee (no valid GitHub user found)"
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --base main \
              --head "$BRANCH_NAME" \
              --label "auto-created,design-system" || \
            gh pr create \
              --title "$TITLE" \
              --body-file pr_body.md \
              --base main \
              --head "$BRANCH_NAME"
          fi
            
          echo "‚úÖ Pull Request created successfully!"