name: Main CI/CD Pipeline

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # Job 1: CI - Tests et Build (toujours)
  ci:
    name: CI - Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build tokens
        run: npm run build:tokens
        
      - name: Build package
        run: npm run build
        
      - name: Lint
        run: npm run lint
        
      - name: Type check
        run: npm run type-check

  # Job 2: Release (seulement sur push vers main, après CI)
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ci
    permissions:
      contents: write
      pull-requests: write
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build tokens
        run: npm run build:tokens
        
      - name: Build package
        run: npm run build
        
      # Utiliser l'action changesets officielle
      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          # Commande pour publier les packages
          publish: npm run release
          # Titre de la PR de release
          title: "chore: release new version"
          # Message de commit
          commit: "chore: version packages"
          # Configuration git automatique
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Obtenir la version publiée depuis la sortie de l'action
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'
          
          # Extraire la version (format JSON)
          VERSION=$(echo "$PUBLISHED_PACKAGES" | jq -r '.[0].version' 2>/dev/null || echo "")
          
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            echo "Creating release for version: $VERSION"
            
            # Créer le tag Git s'il n'existe pas
            if ! git tag -l "v$VERSION" | grep -q "v$VERSION"; then
              git tag "v$VERSION"
              git push origin "v$VERSION"
            fi
            
            # Créer la GitHub Release
            gh release create "v$VERSION" \
              --title "🚀 Release v$VERSION" \
              --notes "New release of @club-employes/utopia design system

**Install:**
\`\`\`bash
npm install @club-employes/utopia@$VERSION
\`\`\`

**Changes:** See CHANGELOG.md for details" \
              --latest
          else
            echo "No version information available, skipping GitHub release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

  deploy-production:
    name: 🌟 Deploy to Production (Vercel)
    runs-on: ubuntu-latest
    needs: [ci]
    permissions:
      pull-requests: write
      issues: write
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build utopia package
        run: |
          cd packages/utopia
          npm run build:tokens
          npm run build

      - name: 📦 Pack and install utopia locally  
        run: |
          cd packages/utopia
          TARBALL=$(npm pack)
          echo "Generated tarball: $TARBALL"
          cd ../../apps/utopia-website
          npm install --no-save "../../packages/utopia/$TARBALL"

      - name: 🏗️ Build website
        run: |
          cd apps/utopia-website
          npm run build

      - name: 🚀 Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: apps/utopia-website
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 🎉 Create deployment success comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const productionUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            // Chercher la dernière PR mergée
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });
            
            if (prs.length > 0 && prs[0].merged_at) {
              const prNumber = prs[0].number;
              
              const comment = `## 🎉 Deployed to Production!
              
              Your changes are now live in production:
              
              **🌟 Production URL:** ${productionUrl}
              
              🚀 **Changes included in this deployment:**
              - Design system updates
              - New components or modifications
              - Documentation improvements
              
              Great work! 🎊
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }